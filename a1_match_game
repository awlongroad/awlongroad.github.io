<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Programming Terms Wordfall Game</title>
    <style>
        /* ============================================
           DYSLEXIA-FRIENDLY ACCESSIBILITY FEATURES
           ============================================ */

        body {
            font-family: 'Arial', sans-serif; /* Sans-serif font for maximum legibility */
            margin: 0;
            padding: 20px;
            background: #f5f5dc; /* Soft beige background instead of harsh white */
            color: #2c3e50; /* Dark blue-grey text for optimal readability */
        }

        .game-container {
            max-width: 1200px;
            margin: 0 auto;
            background: #fafafa; /* Soft off-white background */
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .accessibility-note {
            text-align: center;
            font-size: 1rem;
            margin-bottom: 15px;
            color: #666;
            font-style: italic;
        }

        .word-buttons {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 10px;
            margin-bottom: 30px;
        }

        .word-btn {
            padding: 15px;
            border: 2px solid #2c3e50; /* Dark border for definition */
            border-radius: 8px;
            color: #2c3e50; /* Dark text on light background */
            font-size: 14px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            text-align: center;
            user-select: none;
            line-height: 1.3; /* Good line spacing for readability */
        }

        .word-btn:hover:not(.matched) {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            background: #d0d0d0; /* Light hover effect */
        }

        .word-btn.dragging {
            opacity: 0.7;
            transform: rotate(5deg) scale(1.05);
            z-index: 1000;
        }

        .word-btn.matched {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        .definitions-container {
            display: grid;
            grid-template-columns: 1fr;
            gap: 15px;
        }

        .definition-item {
            display: flex;
            align-items: center;
            gap: 15px;
            padding: 15px;
            background: #f8f9fa; /* Very light grey background */
            border-radius: 8px;
            border: 2px solid #e1e5e9;
            transition: all 0.3s ease;
        }

        .definition-item:hover {
            background: #e9ecef;
        }

        .definition-item.matched {
            background: #e6f3e6; /* Very light green instead of harsh green */
            border-color: #4caf50;
        }

        .definition-slot {
            width: 200px;
            height: 40px;
            border: 2px dashed #2c3e50;
            border-radius: 5px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: white;
            transition: all 0.3s ease;
            min-height: 40px;
            font-size: 12px;
            text-align: center;
            cursor: pointer;
            user-select: none;
            color: #2c3e50;
            font-weight: bold;
        }

        .definition-slot.drag-over {
            border-color: #2c3e50;
            background: #e8f4f8; /* Very light blue background */
            border-style: solid;
        }

        .definition-slot.filled {
            border-style: solid;
            background: #e8f4f8; /* Very light blue background */
            border-color: #2c3e50;
            font-weight: bold;
        }

        .definition-text {
            flex: 1;
            font-size: 14px;
            color: #2c3e50;
            line-height: 1.4; /* Good line spacing for readability */
        }

        .controls {
            text-align: center;
            margin: 30px 0;
        }

        .submit-btn, .reset-btn {
            background: #e8e8e8; /* Light grey background */
            color: #2c3e50; /* Dark text for readability */
            border: 2px solid #2c3e50;
            padding: 12px 30px;
            border-radius: 25px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            margin: 0 10px;
        }

        .submit-btn:hover, .reset-btn:hover {
            background: #d0d0d0;
            transform: translateY(-2px);
        }

        .score {
            text-align: center;
            font-size: 18px;
            margin-top: 20px;
            color: #2c3e50;
            font-weight: bold;
        }

        /* DYSLEXIA-FRIENDLY PASTEL COLORS WITH GOOD CONTRAST */
        /* Research shows pastel colors reduce visual stress for dyslexic readers */
        .program { 
            background: #e6f3ff; /* Very light blue pastel */
        }
        .application { 
            background: #fff2e6; /* Very light orange pastel */
        }
        .programming-language { 
            background: #ffe6f0; /* Very light pink pastel */
        }
        .user-interface { 
            background: #f0e6ff; /* Very light lavender pastel */
        }
        .sub-program { 
            background: #e6ffe6; /* Very light green pastel */
        }

        .debug-info {
            position: fixed;
            top: 10px;
            right: 10px;
            background: rgba(0,0,0,0.6); /* Reduced opacity for less harsh contrast */
            color: white;
            padding: 10px;
            border-radius: 5px;
            font-size: 12px;
            z-index: 9999;
            display: none;
        }

        /* Mobile responsive accessibility */
        @media (max-width: 768px) {
            .word-buttons {
                grid-template-columns: repeat(2, 1fr);
            }

            .word-btn {
                font-size: 12px;
                padding: 12px;
            }

            .definition-slot {
                width: 150px;
                font-size: 11px;
            }

            .definition-text {
                font-size: 13px;
            }
        }

        @media (max-width: 480px) {
            .word-buttons {
                grid-template-columns: 1fr;
            }

            .definition-item {
                flex-direction: column;
                gap: 10px;
            }

            .definition-slot {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="debug-info" id="debugInfo">Debug Info</div>
    
    <div class="game-container">
        
        <div class="word-buttons" id="wordButtons">
            <button class="word-btn program" data-word="PROGRAM">PROGRAM</button>
            <button class="word-btn application" data-word="APPLICATION">APPLICATION</button>
            <button class="word-btn programming-language" data-word="PROGRAMMING LANGUAGE">PROGRAMMING LANGUAGE</button>
            <button class="word-btn user-interface" data-word="USER INTERFACE">USER INTERFACE</button>
            <button class="word-btn sub-program" data-word="SUB-PROGRAM">SUB-PROGRAM</button>
        </div>

        <div class="definitions-container" id="definitionsContainer">
            <div class="definition-item" data-answer="PROGRAM">
                <div class="definition-slot" data-slot="0">Drop here</div>
                <div class="definition-text">A set of instructions that a computer can understand and execute to perform specific tasks</div>
            </div>
            
            <div class="definition-item" data-answer="APPLICATION">
                <div class="definition-slot" data-slot="1">Drop here</div>
                <div class="definition-text">A type of program designed to be user-friendly and help users complete specific tasks</div>
            </div>
            
            <div class="definition-item" data-answer="PROGRAMMING LANGUAGE">
                <div class="definition-slot" data-slot="2">Drop here</div>
                <div class="definition-text">A language like Python or Java used to write instructions for computers</div>
            </div>
            
            <div class="definition-item" data-answer="USER INTERFACE">
                <div class="definition-slot" data-slot="3">Drop here</div>
                <div class="definition-text">The way humans interact with an application through buttons, menus, and visual elements</div>
            </div>
            
            <div class="definition-item" data-answer="SUB-PROGRAM">
                <div class="definition-slot" data-slot="4">Drop here</div>
                <div class="definition-text">A smaller program component that can be reused in different applications</div>
            </div>
        </div>

        <div class="controls">
            <button class="submit-btn" onclick="submitAnswers()">Submit Answers</button>
            <button class="reset-btn" onclick="resetGame()">Reset Game</button>
        </div>

        <div class="score" id="score">Score: 0/5</div>
    </div>

    <script>
        // Game state
        const gameState = {
            matches: {},
            score: 0,
            currentDraggedWord: null,
            currentDraggedElement: null
        };

        // Debug function
        function debug(message) {
            console.log(message);
            const debugEl = document.getElementById('debugInfo');
            debugEl.textContent = message;
            debugEl.style.display = 'block';
            setTimeout(() => {
                debugEl.style.display = 'none';
            }, 2000);
        }

        // Shuffle word buttons
        function shuffleWordButtons() {
            const container = document.getElementById('wordButtons');
            const buttons = Array.from(container.children);
            buttons.sort(() => Math.random() - 0.5);
            buttons.forEach(button => container.appendChild(button));
        }

        // Shuffle definitions
        function shuffleDefinitions() {
            const container = document.getElementById('definitionsContainer');
            const definitions = Array.from(container.children);
            definitions.sort(() => Math.random() - 0.5);
            definitions.forEach(def => container.appendChild(def));
        }

        // Initialize drag and drop
        function initializeDragAndDrop() {
            const wordButtons = document.querySelectorAll('.word-btn');
            const definitionSlots = document.querySelectorAll('.definition-slot');

            // Set up word buttons for dragging
            wordButtons.forEach(button => {
                // Make draggable
                button.draggable = true;

                // Drag start
                button.addEventListener('dragstart', function(e) {
                    if (this.classList.contains('matched')) {
                        e.preventDefault();
                        return false;
                    }

                    gameState.currentDraggedWord = this.dataset.word;
                    gameState.currentDraggedElement = this;
                    
                    this.classList.add('dragging');
                    
                    // Set drag data
                    e.dataTransfer.setData('text/plain', this.dataset.word);
                    e.dataTransfer.effectAllowed = 'move';
                    
                    debug(`Started dragging: ${this.dataset.word}`);
                });

                // Drag end
                button.addEventListener('dragend', function(e) {
                    this.classList.remove('dragging');
                    gameState.currentDraggedWord = null;
                    gameState.currentDraggedElement = null;
                    
                    debug('Drag ended');
                });
            });

            // Set up definition slots for dropping
            definitionSlots.forEach(slot => {
                // Prevent default to allow drop
                slot.addEventListener('dragover', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    this.classList.add('drag-over');
                    e.dataTransfer.dropEffect = 'move';
                });

                slot.addEventListener('dragenter', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    this.classList.add('drag-over');
                });

                slot.addEventListener('dragleave', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    // Only remove drag-over if we're actually leaving the element
                    if (!this.contains(e.relatedTarget)) {
                        this.classList.remove('drag-over');
                    }
                });

                // Handle drop
                slot.addEventListener('drop', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    this.classList.remove('drag-over');
                    
                    const droppedWord = e.dataTransfer.getData('text/plain');
                    const slotIndex = this.dataset.slot;
                    
                    debug(`Dropped ${droppedWord} on slot ${slotIndex}`);
                    
                    if (!droppedWord || !gameState.currentDraggedElement) {
                        debug('No word or element found');
                        return;
                    }

                    // Place the word in the slot
                    placeWordInSlot(droppedWord, slotIndex);
                });

                // Click to remove word
                slot.addEventListener('click', function(e) {
                    if (this.classList.contains('filled')) {
                        const slotIndex = this.dataset.slot;
                        removeWordFromSlot(slotIndex);
                    }
                });
            });
        }

        // Place word in slot
        function placeWordInSlot(word, slotIndex) {
            const slot = document.querySelector(`[data-slot="${slotIndex}"]`);
            const wordButton = document.querySelector(`[data-word="${word}"]`);
            
            if (!slot || !wordButton) {
                debug('Slot or button not found');
                return;
            }

            // Remove word from any previous slot
            removeWordFromAllSlots(word);
            
            // Remove any word currently in this slot
            if (gameState.matches[slotIndex]) {
                removeWordFromSlot(slotIndex);
            }

            // Place new word
            gameState.matches[slotIndex] = word;
            slot.textContent = word;
            slot.classList.add('filled');
            
            // Mark button as matched
            wordButton.classList.add('matched');
            wordButton.draggable = false;
            
            debug(`Placed ${word} in slot ${slotIndex}`);
        }

        // Remove word from specific slot
        function removeWordFromSlot(slotIndex) {
            const slot = document.querySelector(`[data-slot="${slotIndex}"]`);
            const word = gameState.matches[slotIndex];
            
            if (!word || !slot) return;
            
            const wordButton = document.querySelector(`[data-word="${word}"]`);
            
            // Clear slot
            delete gameState.matches[slotIndex];
            slot.textContent = 'Drop here';
            slot.classList.remove('filled');
            
            // Restore button
            if (wordButton) {
                wordButton.classList.remove('matched');
                wordButton.draggable = true;
            }
            
            debug(`Removed ${word} from slot ${slotIndex}`);
        }

        // Remove word from all slots
        function removeWordFromAllSlots(word) {
            Object.keys(gameState.matches).forEach(slotIndex => {
                if (gameState.matches[slotIndex] === word) {
                    removeWordFromSlot(slotIndex);
                }
            });
        }

        // Submit answers
        function submitAnswers() {
            gameState.score = 0;
            
            document.querySelectorAll('.definition-item').forEach(item => {
                const correctAnswer = item.dataset.answer;
                const slot = item.querySelector('.definition-slot');
                const slotIndex = slot.dataset.slot;
                const userAnswer = gameState.matches[slotIndex];
                
                if (userAnswer === correctAnswer) {
                    gameState.score++;
                    item.classList.add('matched');
                } else {
                    item.classList.remove('matched');
                }
            });
            
            document.getElementById('score').textContent = `Score: ${gameState.score}/5`;
            
            if (gameState.score === 5) {
                setTimeout(() => alert('Congratulations! Perfect score! 🎉'), 100);
            } else {
                setTimeout(() => alert(`Game Over! You scored ${gameState.score}/5. Try again!`), 100);
            }
            
            debug(`Final score: ${gameState.score}/5`);
        }

        // Reset game
        function resetGame() {
            // Clear all matches
            Object.keys(gameState.matches).forEach(slotIndex => {
                removeWordFromSlot(slotIndex);
            });
            
            // Reset game state
            gameState.matches = {};
            gameState.score = 0;
            gameState.currentDraggedWord = null;
            gameState.currentDraggedElement = null;
            
            // Reset visual elements
            document.querySelectorAll('.definition-item').forEach(item => {
                item.classList.remove('matched');
            });
            
            document.querySelectorAll('.word-btn').forEach(btn => {
                btn.classList.remove('matched');
                btn.draggable = true;
            });
            
            // Shuffle everything for a new game
            shuffleWordButtons();
            shuffleDefinitions();
            
            document.getElementById('score').textContent = 'Score: 0/5';
            
            debug('Game reset with new shuffle');
        }

        // Initialize game when page loads
        document.addEventListener('DOMContentLoaded', function() {
            debug('Page loaded, initializing...');
            initializeDragAndDrop();
            resetGame();
        });

        // Fallback initialization
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', function() {
                debug('DOMContentLoaded fired');
                initializeDragAndDrop();
                resetGame();
            });
        } else {
            debug('DOM already loaded, initializing immediately');
            initializeDragAndDrop();
            resetGame();
        }
    </script>
</body>
</html>
